#!/usr/bin/env python3
"""
Generate learning progress report for the Python learning repository.
"""
import os
import re
from datetime import datetime
from pathlib import Path


def count_files_in_directory(directory):
    """Count Python and Markdown files in a directory."""
    python_files = len(list(Path(directory).glob("*.py")))
    readme_files = len(list(Path(directory).glob("README.md")))
    return python_files, readme_files


def analyze_learning_modules():
    """Analyze the learning modules and generate statistics."""
    modules = []
    total_python_files = 0
    total_readme_files = 0
    
    # Find all numbered directories (learning modules)
    for item in Path(".").iterdir():
        if item.is_dir() and re.match(r'^\d+', item.name):
            py_count, md_count = count_files_in_directory(item)
            total_python_files += py_count
            total_readme_files += md_count
            
            modules.append({
                'name': item.name,
                'python_files': py_count,
                'readme_files': md_count,
                'has_content': py_count > 0 or md_count > 0
            })
    
    return modules, total_python_files, total_readme_files


def generate_progress_report():
    """Generate a progress report."""
    modules, total_py, total_md = analyze_learning_modules()
    
    report = f"""# Learning Progress Report
Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Overall Statistics
- **Total Modules**: {len(modules)}
- **Python Files**: {total_py}
- **README Files**: {total_md}
- **Completion Rate**: {len([m for m in modules if m['has_content']])} / {len(modules)} modules have content

## Module Details
"""
    
    for module in sorted(modules, key=lambda x: x['name']):
        status = "✅ Complete" if module['has_content'] else "⏳ In Progress"
        report += f"- **{module['name']}**: {status} (Python: {module['python_files']}, README: {module['readme_files']})\n"
    
    report += f"""
## Learning Path
```
{' -> '.join([m['name'] for m in sorted(modules, key=lambda x: x['name'])])}
```

---
*This report is automatically generated by GitHub Actions.*
"""
    
    return report


def update_progress_file():
    """Update or create the progress file."""
    progress_content = generate_progress_report()
    
    with open('PROGRESS.md', 'w', encoding='utf-8') as f:
        f.write(progress_content)
    
    print("Progress report generated successfully!")
    print(progress_content)


if __name__ == "__main__":
    update_progress_file()
