name: Learning Progress Tracker

on:
  push:
    branches: [ main ]
    paths: 
      - '*/**.py'
      - '*/**.md'

jobs:
  track-progress:
    runs-on: ubuntu-latest
    name: Update Learning Progress
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Generate Progress Report
      run: |
        cat > generate_progress.py << 'EOF'
        import os
        import re
        from datetime import datetime
        
        def count_files_in_directory(directory):
            """Count Python and Markdown files in a directory."""
            py_files = 0
            md_files = 0
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if file.endswith('.py'):
                        py_files += 1
                    elif file.endswith('.md'):
                        md_files += 1
            return py_files, md_files
        
        def generate_progress_badge(completed, total):
            """Generate a progress percentage."""
            if total == 0:
                return 0
            return round((completed / total) * 100)
        
        # Get all numbered directories (learning modules)
        modules = []
        for item in os.listdir('.'):
            if os.path.isdir(item) and re.match(r'^\d+', item):
                modules.append(item)
        
        modules.sort()
        
        # Count files and generate report
        total_py_files = 0
        total_md_files = 0
        module_progress = []
        
        for module in modules:
            py_count, md_count = count_files_in_directory(module)
            total_py_files += py_count
            total_md_files += md_count
            
            # Estimate completion based on files present
            expected_files = 2  # Assume each module should have at least README + example
            completion = min(100, (py_count + md_count) * 50)  # 50% per file type
            
            module_progress.append({
                'name': module,
                'py_files': py_count,
                'md_files': md_count,
                'completion': completion
            })
        
        # Generate progress report
        report = f"""# ðŸ“Š Learning Progress Report
        
        Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
        
        ## ðŸ“ˆ Overall Statistics
        
        - **Total Modules**: {len(modules)}
        - **Python Files**: {total_py_files}
        - **Documentation Files**: {total_md_files}
        - **Overall Progress**: {sum(m['completion'] for m in module_progress) // len(modules) if modules else 0}%
        
        ## ðŸ“š Module Progress
        
        | Module | Python Files | Documentation | Progress |
        |--------|--------------|---------------|----------|"""
        
        for module in module_progress:
            progress_bar = 'ðŸŸ©' * (module['completion'] // 20) + 'â¬œ' * (5 - module['completion'] // 20)
            report += f"\n| {module['name']} | {module['py_files']} | {module['md_files']} | {progress_bar} {module['completion']}% |"
        
        report += f"""
        
        ## ðŸŽ¯ Next Steps
        
        Based on your current progress, consider:
        
        1. **Practice More**: Create additional Python examples in modules with fewer files
        2. **Document Learning**: Add more detailed explanations in README files
        3. **Test Knowledge**: Try implementing variations of the examples
        4. **Review Concepts**: Go back to modules with lower completion rates
        
        ---
        
        *This report is automatically generated by GitHub Actions*
        """
        
        # Write to PROGRESS.md
        with open('PROGRESS.md', 'w') as f:
            f.write(report)
        
        print("Progress report generated successfully!")
        EOF
        
        python generate_progress.py
    
    - name: Commit Progress Report
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add PROGRESS.md
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ðŸ“Š Update learning progress report [automated]"
          git push
        fi
