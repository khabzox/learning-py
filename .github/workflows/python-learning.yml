name: Python Learning Repository CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort pylint flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
    
    - name: Check code formatting with Black
      run: |
        black --check --diff . || echo "Code formatting issues found, but not failing the build"
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "Import sorting issues found, but not failing the build"
    
    - name: Run pylint
      run: |
        pylint **/*.py --fail-under=7.0 || echo "Pylint completed with warnings"

  test-python-examples:
    runs-on: ubuntu-latest
    name: Test Python Examples
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Run Python examples
      run: |
        find . -name "*.py" -type f | while read file; do
          echo "Testing: $file"
          python "$file" || echo "Warning: $file failed to execute"
        done

  markdown-lint:
    runs-on: ubuntu-latest
    name: Markdown Lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli
    
    - name: Lint Markdown files
      run: |
        markdownlint **/*.md --config .markdownlint.json || echo "Markdown linting completed with warnings"

  spell-check:
    runs-on: ubuntu-latest
    name: Spell Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Spell check
      uses: streetsidesoftware/cspell-action@v2
      with:
        files: "**/*.{md,py}"
        config: .cspell.json

  validate-structure:
    runs-on: ubuntu-latest
    name: Validate Repository Structure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check required files
      run: |
        # Check if essential files exist
        test -f README.md || (echo "README.md is missing" && exit 1)
        test -f LICENSE || (echo "LICENSE is missing" && exit 1)
        test -f .gitattributes || (echo ".gitattributes is missing" && exit 1)
        
        # Check if each module has a README
        for dir in */; do
          if [[ "$dir" != ".github/" && "$dir" != "__pycache__/" ]]; then
            if [[ ! -f "${dir}README.md" ]]; then
              echo "Warning: ${dir}README.md is missing"
            fi
          fi
        done
    
    - name: Validate learning progression
      run: |
        # Check if modules are properly numbered
        modules=($(ls -d */ | grep -E '^[0-9]' | sort -V))
        expected=1
        
        for module in "${modules[@]}"; do
          current=$(echo "$module" | grep -o '^[0-9]*')
          if [[ "$current" != "$expected" ]]; then
            echo "Warning: Module numbering gap detected. Expected $expected, found $current"
          fi
          ((expected++))
        done
