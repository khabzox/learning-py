name: Auto-format and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  auto-format:
    runs-on: ubuntu-latest
    name: Auto-format Code
    if: ${{ !contains(github.event.head_commit.message, '[skip format]') }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort
    
    - name: Format Python code
      run: |
        black .
        isort .
    
    - name: Commit formatting changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        if git diff --staged --quiet; then
          echo "No formatting changes needed"
        else
          git commit -m "ðŸŽ¨ Auto-format code [skip ci]"
          git push
        fi

  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate Release Notes
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")
        
        echo "# Release Notes for $LATEST_TAG" > release_notes.md
        echo "" >> release_notes.md
        
        if [ ! -z "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits between tags
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$LATEST_TAG >> release_notes.md
        else
          echo "## Initial Release" >> release_notes.md
          echo "" >> release_notes.md
          echo "This is the first release of the Python Learning Repository." >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## ðŸ“š Learning Modules Included" >> release_notes.md
        echo "" >> release_notes.md
        
        # List all learning modules
        for dir in */; do
          if [[ "$dir" != ".github/" && "$dir" != "__pycache__/" ]]; then
            module_name=$(echo "$dir" | sed 's/\///g')
            if [ -f "${dir}README.md" ]; then
              title=$(head -n 1 "${dir}README.md" | sed 's/^# //')
              echo "- **$module_name**: $title" >> release_notes.md
            else
              echo "- **$module_name**: Learning module" >> release_notes.md
            fi
          fi
        done
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Python Learning v${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false
